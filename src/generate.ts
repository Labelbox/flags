import { Project, StructureKind, IndentationText, QuoteKind } from 'ts-morph';
import { FlagResponseItem, LDAllFlagsResponse } from './ld-api';

const toPascalCase = (input: string) => {
  return input
    .split('-')
    .map((i) => `${i.charAt(0).toUpperCase()}${i.slice(1)}`)
    .join('');
};
const getTypescriptTypeString = (value: any) => {
  const type = typeof value;
  if (type === 'object') {
    return `Record<string, any>`;
  }
  return type;
};
export const writeFlagEnumFile = async (
  flags: FlagResponseItem[],
  outFile: string
) => {
  const proj = new Project({
    manipulationSettings: {
      indentationText: IndentationText.TwoSpaces,
      quoteKind: QuoteKind.Single,
    },
  });
  const members = flags.map((item) => {
    return {
      value: item.key,
      name: toPascalCase(item.key),
    };
  });
  const file = proj.createSourceFile(
    outFile,
    {
      statements: [
        {
          kind: StructureKind.Enum,
          name: 'FlagNames',
          isExported: true,
          members,
        },
      ],
    },
    { overwrite: true }
  );
  file.insertStatements(
    0,
    `// THIS FILE WAS GENERATED BY @labelbox/flags. DO NOT EDIT ....`
  );
  file.addStatements(`
export type BooleanFlag<T extends FlagNames> = Record<T, boolean>;
export type MultivariantFlag<T extends FlagNames, V> = Record<T, V>;`);

  file.addTypeAlias({
    name: 'FeatureFlags',
    isExported: true,
    kind: StructureKind.TypeAlias,
    type: (writer) => {
      flags.forEach(({ key, kind, variations }, i) => {
        const enumValue = `FlagNames.${toPascalCase(key)}`;
        const TypeKind =
          kind === 'boolean' ? 'BooleanFlag' : 'MultivariantFlag';
        const TypeArgs =
          kind === 'boolean'
            ? [enumValue]
            : [enumValue, getTypescriptTypeString(variations[0].value)];
        const flagType = `${TypeKind}<${TypeArgs.join(', ')}>`;
        if (i !== flags.length - 1) {
          writer.writeLine(`${flagType} &`);
        } else {
          writer.write(flagType);
        }
      });
    },
  });
  console.log(`Generating flag file at ${outFile}`);
  await file.save();
};
